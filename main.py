import asyncio
import logging
import os
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from config import TOKEN  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª config.py —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
def get_photo_path(filename):
    photo_path = Path(__file__).parent / "photos" / filename
    if not photo_path.exists():
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    return types.FSInputFile(photo_path)

async def mainmenu(msg: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üìÇ")],
            [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è"), KeyboardButton(text="–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ üåê")]
        ],
        resize_keyboard=True
    )
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)

@dp.message(Command("start"))
async def start(msg: types.Message):
    keyboard1 = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="rus")],
            [KeyboardButton(text="eng")]
        ],
        resize_keyboard=True
    )
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫/lang", reply_markup=keyboard1)

@dp.message()
async def handle_callback_query(msg: types.Message):
    if msg.text == "–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ üåê":
        photo = get_photo_path("mainmenu.jpg")
        text = """
–ü—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ü–æ–¥–¥–µ—Ä–∂–∫—É:

üîπ 1. <b>–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –∏–∑–ª–æ–∂–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ - –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –í–∞–º –ø–æ–º–æ—á—å.</b>
üîπ 2. <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π ID</b> - –Ω–∞–º —ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.
üîπ 3. <b>–ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã</b>, –Ω–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –Ω–µ —Ä–æ–±–æ—Ç—ã.

<i>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –æ—Ç–≤–µ—Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç –≤–∞—Å –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å!</i>
        """
        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/support")]
            ]
        )
        if photo:
            await msg.answer_photo(photo=photo, caption=text, parse_mode="HTML", reply_markup=inline_keyboard)
        else:
            await msg.answer("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", parse_mode="HTML")

    elif msg.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è":
        photo = get_photo_path("information.jpg")
        text = """
–û –°–µ—Ä–≤–∏—Å–µ

<i>–ù–∞—à —Å–µ—Ä–≤–∏—Å</i> <b>‚Äî —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è NFT. –ü–æ–∫—É–ø–∞–π—Ç–µ, –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –¥–ª—è —Å–µ–±—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã.</b>
        """
        inline1_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–°–æ–≥–ª–∞—à–µ–Ω–∏–µ", url="https://t.me/terms"),
                 InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/support")],
                [InlineKeyboardButton(text="–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", url="https://t.me/report")]
            ]
        )
        if photo:
            await msg.answer_photo(photo=photo, caption=text, parse_mode="HTML", reply_markup=inline1_keyboard)
        else:
            await msg.answer("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", parse_mode="HTML")

    elif msg.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üìÇ":
        text = """
<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>

–ë–∞–ª–∞–Ω—Å: N‚ÇΩ
–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: N‚ÇΩ
–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚ö†Ô∏è <b>–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω / ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</b>
–í–∞—à ID: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: Name
<b>–í–æ–∑—Ä–∞—Å—Ç: N –ª–µ—Ç</b>
<b>–í —Å–µ—Ä–≤–∏—Å–µ: N –¥–Ω–µ–π</b>
–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: N
–†–µ–π—Ç–∏–Ω–≥: <b>N/10</b>
        """
        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ú–æ–∏ –æ—Ç–∑—ã–≤—ã", callback_data="otz")],
                [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="act"),
                 InlineKeyboardButton(text="–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="no"),
                 InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="end")],
                [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="dep"),
                 InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏", callback_data="undep")]
            ]
        )
        await msg.answer(text, parse_mode="HTML", reply_markup=inline_keyboard)

    elif msg.text == "eng":
        await msg.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ English.")

    elif msg.text == "rus":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞–∫–∞–∑—á–∏–∫")],
                [KeyboardButton(text="–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")]
            ],
            resize_keyboard=True
        )
        await msg.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –†—É—Å—Å–∫–∏–π. –ö—Ç–æ –≤—ã?", reply_markup=keyboard)

    elif msg.text == "–ó–∞–∫–∞–∑—á–∏–∫":
        keyboard1 = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        await msg.answer("–¢—É—Ç –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å.", reply_markup=keyboard1)

    elif msg.text == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        await mainmenu(msg)

    elif msg.text == "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
        await msg.answer("–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=keyboard)

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
